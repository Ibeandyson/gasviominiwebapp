import React, { useState, useEffect } from "react";
import type { NextPage } from "next";
import Head from "next/head";
import { Form, Button, Card, Row, Col } from "react-bootstrap";
import { Header, Loader, CustomerModal } from "../src/components";
import styles from "../styles/AddStaff.module.css";
import useCustomer from "../src/hooks/useCustomer";
import useStaff from "../src/hooks/useStaff";
import dynamic from "next/dynamic";
import crypto from "crypto";
const QrReader = dynamic(() => import("react-qr-reader"), {
  ssr: false,
});
import useWithAuth from "../src/hooks/useWithAuth";

type formData = {
  user_id: string;
  email: string;
  phone: string;
  address: string;
  firstName: string;
  lastName: string;
  cylinderSize: string;
  cylinderAge: string;
  staffFirstName: string;
  staffLastName: string;
  staffRole: string;
  refillDate: string;
  refillKg: string;
  amount: string;
};

const GasPurchase: NextPage = () => {
  const [modalState, setModaleState] = useState(false);

  const [formInput, setFormInput] = useState<formData>({
    user_id: "",
    email: "",
    phone: "",
    address: "",
    firstName: "",
    lastName: "",
    cylinderSize: "",
    cylinderAge: "",
    staffFirstName: "",
    staffLastName: "",
    staffRole: "",
    refillDate: "",
    refillKg: "",
    amount: "",
  });

  const [lastFillData, setLastFillData] = useState({
    lastRefillDate: "",
    lastRefillKg: "",
  });

  const { user_id, amount, refillKg } = formInput;

  const { loading, getOneUser, oneCustomerData, updateOneUser } = useCustomer();

  const { saleGas } = useStaff();

  const onChangeHandler = (e: any) => {
    setFormInput({ ...formInput, [e.target.name]: e.target.value });
  };

  const handleScan = (data: any) => {
    if (data) {
      getOneUser(data);
    }
  };

  const handleError = (err: any) => {
    console.error(err);
  };

  useEffect(() => {
    setFormInput({
      ...formInput,
      user_id: oneCustomerData?._id,
      email: oneCustomerData?.email,
      phone: oneCustomerData?.phone,
      address: oneCustomerData?.address,
      firstName: oneCustomerData?.firstName,
      lastName: oneCustomerData?.lastName,
      cylinderSize: oneCustomerData?.cylinderSize,
      cylinderAge: oneCustomerData?.cylinderAge,
    });

    setLastFillData({
      ...lastFillData,
      lastRefillDate: oneCustomerData?.purchase?.lastRefillDate,
      lastRefillKg: oneCustomerData?.purchase?.lastRefillKg,
    });
  }, [oneCustomerData]);

  useEffect(() => {
    if (oneCustomerData !== null) {
      setModaleState(true);
    }
  }, [oneCustomerData]);

  const onSubmit = (e: any) => {
    e.preventDefault();
    saleGas(formInput);
    updateOneUser({
      lastRefillDate: new Date(Date.now()),
      lastRefillKg: refillKg,
      user_id: user_id,
    });
  };

  //LOCAL STORAGE ENCRYPTION AND DECYPTION keys
  let aeskey = "MvYiDO2ePasOLVcN";
  let ivKey = "RQBblIzmI3UhH0N9";

  useEffect(() => {
    if (typeof window !== undefined) {
      let data: any = localStorage.getItem("staff_data");
      const md5Key = crypto
        .createHash("md5")
        .update(aeskey)
        .digest("hex")
        .substr(0, 24);
      const decipher = crypto.createDecipheriv(
        "des-ede3",
        md5Key,
        ivKey,
        aeskey
      );
      let decrypted = decipher.update(data, "base64", "utf8");
      decrypted += decipher.final("utf8");
      const _staffData = JSON.parse(decrypted);
      setFormInput({
        ...formInput,
        staffFirstName: _staffData.firstName,
        staffLastName: _staffData.lastName,
        staffRole: _staffData.role,
      });
    } else {
      return null;
    }
  }, []);

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header />
      {loading && <Loader />}
      <CustomerModal hide={setModaleState} modalShow={modalState} data={oneCustomerData}/>
      <div className={styles.container}>
        <main className={styles.main}>
          <Card className="shadow-sm p-3 mb-5 bg-body rounde">
            <Card.Header>
              <Card.Title>
                <b>Customer Gas Purchase</b>
              </Card.Title>
            </Card.Header>
            <Card.Body>
              {user_id?.length < 1 ? (
                <div>
                  <Row>
                    <Col sm={12} md={12}>
                      <div className="mb-3 mt-3 text-center">
                        <QrReader
                          delay={300}
                          onScan={(val) => handleScan(val)}
                          onError={handleError}
                        />
                      </div>
                    </Col>
                  </Row>
                </div>
              ) : (
                <div>
                  <Row>
                    <Col sm={12} md={4}>
                      <Form.Group
                        className="mb-5 mt-3"
                        controlId="formBasicEmail"
                      >
                        <Form.Label>Gas Kg</Form.Label>
                        <Form.Control
                          className="form"
                          type="number"
                          placeholder="Enter Gas Kg"
                          name="refillKg"
                          value={refillKg}
                          min="1"
                          onChange={(e) => onChangeHandler(e)}
                        />
                      </Form.Group>
                    </Col>
                    <Col sm={12} md={4}>
                      <Form.Group
                        className="mb-5 mt-3"
                        controlId="formBasicEmail"
                      >
                        <Form.Label>Payable Amount</Form.Label>
                        <Form.Control
                          className="form"
                          type="number"
                          placeholder="Enter Payable Amount"
                          name="amount"
                          min="1"
                          value={amount}
                          onChange={(e) => onChangeHandler(e)}
                        />
                      </Form.Group>
                    </Col>

                    <Col sm={12} md={4}>
                      <div className="text-center">
                        <Button
                          className="mb-5 mt-3"
                          variant="primary"
                          onClick={onSubmit}
                        >
                          Send Now
                        </Button>
                      </div>
                    </Col>
                  </Row>
                </div>
              )}
            </Card.Body>
          </Card>
        </main>
      </div>
    </div>
  );
};

export default useWithAuth(GasPurchase, false);
